import re
import asyncio
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# üëâ –°—ñ–∑–¥—ñ“£ —Ç–æ–∫–µ–Ω (–Ω–∞“õ—Ç—ã ”©–∑—ñ“£—ñ–∑–¥—ñ–∫—ñ “õ–æ–π—ã–ª–¥—ã)
BOT_TOKEN = "8035442387:AAFnszuT3AbictfnyA2xrHVD6IFxX5Tw1zA"

# ”ò—Ä —á–∞—Ç“õ–∞ –∂–µ–∫–µ-–∂–µ–∫–µ –∫“Ø–π —Å–∞“õ—Ç–∞–π–º—ã–∑
states = {}

def split_text(text, size=4):
    words = [w for w in re.split(r"\s+", text.strip()) if w]
    return [" ".join(words[i:i+size]) for i in range(0, len(words), size)]

def keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ñ∂Ô∏è Start", callback_data="start"),
         InlineKeyboardButton("‚è∏ Stop", callback_data="stop")],
        [InlineKeyboardButton("üîç Preview", callback_data="preview")]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–°”ô–ª–µ–º! –ú–∞“ì–∞–Ω “±–∑—ã–Ω –º”ô—Ç—ñ–Ω –∂—ñ–±–µ—Ä.\n"
        "–ú–µ–Ω –æ–Ω—ã –±”©–ª—ñ–ø-–±”©–ª—ñ–ø –∂—ñ–±–µ—Ä–µ–º—ñ–Ω.\n",
        reply_markup=keyboard()
    )

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text
    chunks = split_text(text, 4)
    states[chat_id] = {"chunks": chunks, "index": 0, "task": None}
    await update.message.reply_text(
        f"–ú”ô—Ç—ñ–Ω “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã. {len(chunks)} –±”©–ª—ñ–∫–∫–µ –±”©–ª—ñ–Ω–¥—ñ.",
        reply_markup=keyboard()
    )

async def preview(chat_id, context):
    st = states.get(chat_id)
    if not st or not st["chunks"]:
        await context.bot.send_message(chat_id, "–ê–ª–¥—ã–º–µ–Ω –º”ô—Ç—ñ–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.")
        return
    preview = "\n".join(st["chunks"][:10])
    await context.bot.send_message(chat_id, "–ê–ª–¥—ã–Ω –∞–ª–∞ –∫”©—Ä—É:\n" + preview)

async def sender(chat_id, context):
    st = states[chat_id]
    while st["index"] < len(st["chunks"]):
        chunk = st["chunks"][st["index"]]
        await context.bot.send_message(chat_id, chunk)
        st["index"] += 1
        await asyncio.sleep(8)  # ‚è± ”ô—Ä 8 —Å–µ–∫—É–Ω–¥ —Å–∞–π—ã–Ω

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat.id
    st = states.get(chat_id)

    if query.data == "start":
        if not st or not st["chunks"]:
            await query.answer("–ê–ª–¥—ã–º–µ–Ω –º”ô—Ç—ñ–Ω –∂—ñ–±–µ—Ä.")
            return
        if st["task"] and not st["task"].done():
            await query.answer("“ö–∞–∑—ñ—Ä–¥—ñ“£ ”©–∑—ñ–Ω–¥–µ –∂—ñ–±–µ—Ä—ñ–ª—ñ–ø –∂–∞—Ç—ã—Ä.")
            return
        st["index"] = 0
        st["task"] = asyncio.create_task(sender(chat_id, context))
        await query.answer("–ñ—ñ–±–µ—Ä—É –±–∞—Å—Ç–∞–ª–¥—ã ‚ñ∂Ô∏è")

    elif query.data == "stop":
        if st and st["task"]:
            st["task"].cancel()
            await query.answer("–¢–æ“õ—Ç–∞—Ç—ã–ª–¥—ã ‚è∏")
        else:
            await query.answer("–ï—à—Ç–µ“£–µ –∂“Ø—Ä–º–µ–π —Ç“±—Ä.")

    elif query.data == "preview":
        await preview(chat_id, context)
        await query.answer()

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.add_handler(CallbackQueryHandler(button))
    app.run_polling()

if __name__ == "__main__":
    main()
